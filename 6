Adapter is a type of ٍٍStructural Design Patterns

The Adapter is used when you have an existing interface that doesn't directly map to an interface 
that the client requires. So, then you create the Adapter that has a similar functional role, but
with a new compatible interface.
"""


class ClassA():
    "A Sample Class the implements IA"

    def method_a(self):
        print("method A")


class ClassB():
    "A Sample Class the implements IB"

    def method_b(self):
        print("method B")

class ClassBAdapter():
    "ClassB does not have a method_a, so we can create an adapter"

    def __init__(self):
        self.class_b = ClassB()

    def method_a(self):
        "calls the class b method_b instead"
        self.class_b.method_b()
        


# Before the adapter I need to test the objects class to know which
# method to call.
ITEMS = [ClassA(), ClassB()]
for item in ITEMS:
    if isinstance(item, ClassB):
        item.method_b()
    else:
        item.method_a()

# After creating an adapter for ClassB I can reuse the same method
# signature as ClassA (preferred)
ITEMS = [ClassA(), ClassBAdapter()]
for item in ITEMS:
    item.method_a(

Facade is a type of Structural Design Patterns
"""

"""Facade pattern with an example of WashingMachine"""

class Washing: 
	'''Subsystem # 1'''

	def wash(self): 
		print("Washing...") 


class Rinsing: 
	'''Subsystem # 2'''

	def rinse(self): 
		print("Rinsing...") 


class Spinning: 
	'''Subsystem # 3'''

	def spin(self): 
		print("Spinning...") 


class WashingMachine: 
	'''Facade'''

	def __init__(self): 
		self.washing = Washing() 
		self.rinsing = Rinsing() 
		self.spinning = Spinning() 

	def startWashing(self): 
		self.washing.wash() 
		self.rinsing.rinse() 
		self.spinning.spin() 

""" main method """
if __name__ == "__main__": 

	washingMachine = WashingMachine() 
	washingMachine.startWashing()

Flyweight is a type of Structural Design Patterns
"""


class ComplexCars(object):

	"""Separate class for Complex Cars"""

	def __init__(self):

		pass

	def cars(self, car_name):

		return "ComplexPattern[% s]" % (car_name)


class CarFamilies(object):

	"""dictionary to store ids of the car"""

	car_family = {}

	def __new__(cls, name, car_family_id):
 
		try:
			obj = cls.car_family[car_family_id]
            
		except KeyError:
			obj = object.__new__(cls)
			cls.car_family[car_family_id] = obj
		return obj

	def set_car_info(self, car_info):

		"""set the car information"""

		cg = ComplexCars()
		self.car_info = cg.cars(car_info)

	def get_car_info(self):

		"""return the car information"""

		return (self.car_info)



if __name__ == '__main__':
	car_data = (('a', 1, 'Audi'), ('a', 2, 'Ferrari'), ('b', 1, 'Audia'))
	car_family_objects = []
	for i in car_data:
		obj = CarFamilies(i[0], i[1])
		obj.set_car_info(i[2])
		car_family_objects.append(obj)


	"""similar id's says that they are same objects """

	for i in car_family_objects:
		print("id = " + str(id(i)))
		print(i.get_car_info()